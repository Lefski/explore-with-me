{
	"info": {
		"_postman_id": "04222b45-6360-4138-92a0-c41ac8c93581",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "27052352",
		"_collection_link": "https://solar-spaceship-58974.postman.co/workspace/Practicum-filmorate~60362f94-0045-489a-bfb3-bf04644d1b6e/collection/27052352-04222b45-6360-4138-92a0-c41ac8c93581?action=share&source=collection_link&creator=27052352"
	},
	"item": [
		{
			"name": "Validation",
			"item": [
				{
					"name": "Создания комментария к неопубликованному событию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"text\":\"Comment 2 text to event 1\",\r\n\"eventId\":\"3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "stats-server:8080/users/1/comments"
					},
					"response": []
				},
				{
					"name": "Создания комментария к с пустым текстом",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"text\":\"\",\r\n\"eventId\":\"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "stats-server:8080/users/1/comments"
					},
					"response": []
				},
				{
					"name": "Удаление несуществующего комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.status(404);    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "stats-server:8080/users/1/comments/3"
					},
					"response": []
				},
				{
					"name": "Изменение несуществующего комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"new Comment 1 text\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "stats-server:8080/users/1/comments/1"
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Публикация события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('publishedOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\",\r\n  \"annotation\": null,\r\n  \"category\": null,\r\n  \"description\": null,\r\n  \"eventDate\": null,\r\n  \"location\": null,\r\n  \"paid\": null,\r\n  \"participantLimit\": null,\r\n  \"requestModeration\": null,\r\n  \"title\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "stats-server:8080/admin/events/1"
					},
					"response": []
				},
				{
					"name": "Создания комментария к событию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Проверка данных в ответе\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property('id', 1);\r",
									"    pm.expect(jsonData).to.have.property('eventId', 1);\r",
									"    \r",
									"    // Проверка поля \"creator\"\r",
									"\r",
									"    pm.expect(jsonData).to.have.property('text', \"Comment 1 text to event 1\");\r",
									"    pm.expect(jsonData).to.have.property('status', \"PUBLISHED\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"text\":\"Comment 1 text to event 1\",\r\n\"eventId\":\"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "stats-server:8080/users/1/comments"
					},
					"response": []
				},
				{
					"name": "Создания повторного комментария к событию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Проверка данных в ответе\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property('id', 2);\r",
									"    pm.expect(jsonData).to.have.property('eventId', 1);\r",
									"\r",
									"    pm.expect(jsonData).to.have.property('text', \"Comment 2 text to event 1\");\r",
									"    pm.expect(jsonData).to.have.property('status', \"PUBLISHED\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"text\":\"Comment 2 text to event 1\",\r\n\"eventId\":\"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "stats-server:8080/users/1/comments"
					},
					"response": []
				},
				{
					"name": "Изменение комментария к события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Проверка данных в ответе\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property('id', 1);\r",
									"    pm.expect(jsonData).to.have.property('eventId', 1);\r",
									"\r",
									"    pm.expect(jsonData).to.have.property('text', \"new Comment 1 text\");\r",
									"    pm.expect(jsonData).to.have.property('status', \"PUBLISHED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"new Comment 1 text\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "stats-server:8080/users/1/comments/1"
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Проверка статуса ответа\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Проверка данных в ответе\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Проверка наличия полей в теле ответа\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    \r",
									"    jsonData.forEach(function(comment) {\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('eventId');\r",
									"        pm.expect(comment).to.have.property('creator');\r",
									"        pm.expect(comment).to.have.property('text');\r",
									"        pm.expect(comment).to.have.property('status');\r",
									"        pm.expect(comment).to.have.property('updateTime');\r",
									"    });\r",
									"});\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "stats-server:8080/users/1/comments"
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев к событию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Проверка статуса ответа\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Проверка данных в ответе\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Проверка наличия полей в теле ответа\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    \r",
									"    jsonData.forEach(function(comment) {\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('eventId');\r",
									"        pm.expect(comment).to.have.property('creator');\r",
									"        pm.expect(comment).to.have.property('text');\r",
									"        pm.expect(comment).to.have.property('status');\r",
									"        pm.expect(comment).to.have.property('updateTime');\r",
									"    });\r",
									"});\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "stats-server:8080/1/comments"
					},
					"response": []
				},
				{
					"name": "Удаление комментария 1 создателем комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Проверка статуса ответа\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "stats-server:8080/users/1/comments/1"
					},
					"response": []
				},
				{
					"name": "Повторное удаление комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Проверка статуса ответа\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "stats-server:8080/users/1/comments/1"
					},
					"response": []
				},
				{
					"name": "Удаление комментария 2 администратором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Проверка статуса ответа\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "stats-server:8080/admin/comments/2/delete"
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев, текст должен быть удалён",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Проверка статуса ответа\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Проверка данных в ответе\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Проверка наличия полей в теле ответа\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    \r",
									"    jsonData.forEach(function(comment) {\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('eventId');\r",
									"        pm.expect(comment).to.have.property('creator');\r",
									"        pm.expect(comment).to.have.property('text');\r",
									"        pm.expect(comment).to.have.property('status');\r",
									"        pm.expect(comment).to.have.property('updateTime');\r",
									"    });\r",
									"});\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "stats-server:8080/1/comments"
					},
					"response": []
				}
			]
		}
	]
}